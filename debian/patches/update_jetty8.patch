--- a/soapui/src/main/java/com/eviware/soapui/impl/support/BaseMockResult.java
+++ b/soapui/src/main/java/com/eviware/soapui/impl/support/BaseMockResult.java
@@ -23,7 +23,7 @@
 import com.eviware.soapui.support.action.swing.ActionList;
 import com.eviware.soapui.support.action.swing.DefaultActionList;
 import com.eviware.soapui.support.types.StringToStringsMap;
-import org.mortbay.jetty.HttpFields;
+import org.eclipse.jetty.http.HttpFields;
 
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
@@ -99,8 +99,8 @@
 
     @SuppressWarnings("unchecked")
     public void finish() {
-        if (mockRequest.getHttpResponse() instanceof org.mortbay.jetty.Response) {
-            HttpFields httpFields = ((org.mortbay.jetty.Response) mockRequest.getHttpResponse()).getHttpFields();
+        if (mockRequest.getHttpResponse() instanceof org.eclipse.jetty.server.Response) {
+            HttpFields httpFields = ((org.eclipse.jetty.server.Response) mockRequest.getHttpResponse()).getHttpFields();
 
             Enumeration<String> e = httpFields.getFieldNames();
             while (e.hasMoreElements()) {
--- a/soapui/src/main/java/com/eviware/soapui/impl/wsdl/mock/WsdlMockDispatcher.java
+++ b/soapui/src/main/java/com/eviware/soapui/impl/wsdl/mock/WsdlMockDispatcher.java
@@ -217,8 +217,8 @@
                     long startTime = System.nanoTime();
                     result = mockOperation.dispatchRequest(mockRequest);
 
-                    if (mockRequest.getHttpRequest() instanceof org.mortbay.jetty.Request) {
-                        ((org.mortbay.jetty.Request) mockRequest.getHttpRequest()).setHandled(true);
+                    if (mockRequest.getHttpRequest() instanceof org.eclipse.jetty.server.Request) {
+                        ((org.eclipse.jetty.server.Request) mockRequest.getHttpRequest()).setHandled(true);
                     }
 
                     result.setTimeTaken((System.nanoTime() - startTime) / 1000000);
--- a/soapui/src/main/java/com/eviware/soapui/impl/wsdl/monitor/SoapMonitorEngineImpl.java
+++ b/soapui/src/main/java/com/eviware/soapui/impl/wsdl/monitor/SoapMonitorEngineImpl.java
@@ -25,10 +25,10 @@
 import com.eviware.soapui.monitor.SoapUIJettyThreadPool;
 import com.eviware.soapui.support.StringUtils;
 import com.eviware.soapui.support.UISupport;
-import org.mortbay.jetty.bio.SocketConnector;
-import org.mortbay.jetty.security.SslSocketConnector;
-import org.mortbay.jetty.servlet.Context;
-import org.mortbay.jetty.servlet.ServletHolder;
+import org.eclipse.jetty.server.bio.SocketConnector;
+import org.eclipse.jetty.server.ssl.SslSocketConnector;
+import org.eclipse.jetty.servlet.ServletContextHandler;
+import org.eclipse.jetty.servlet.ServletHolder;
 
 import java.net.BindException;
 
@@ -55,7 +55,7 @@
     public void start(WsdlProject project, int localPort, SoapMonitorListenerCallBack listenerCallBack) {
         Settings settings = project.getSettings();
         server.setThreadPool(new SoapUIJettyThreadPool());
-        Context context = new Context(server, ROOT, 0);
+        ServletContextHandler context = new ServletContextHandler(server, ROOT, 0);
 
         if (!StringUtils.isNullOrEmpty(sslEndpoint)) {
             if (sslEndpoint.startsWith(HTTPS)) {
--- a/soapui/src/main/java/com/eviware/soapui/impl/wsdl/monitor/jettyproxy/JettyServer.java
+++ b/soapui/src/main/java/com/eviware/soapui/impl/wsdl/monitor/jettyproxy/JettyServer.java
@@ -18,9 +18,9 @@
 
 import com.eviware.soapui.SoapUI;
 import org.apache.log4j.Logger;
-import org.mortbay.jetty.Request;
-import org.mortbay.jetty.Response;
-import org.mortbay.util.IO;
+import org.eclipse.jetty.server.Request;
+import org.eclipse.jetty.server.Response;
+import org.eclipse.jetty.util.IO;
 
 import javax.net.ssl.SSLSocket;
 import javax.net.ssl.SSLSocketFactory;
@@ -31,8 +31,9 @@
 import java.net.InetSocketAddress;
 import java.net.Socket;
 import java.nio.channels.SocketChannel;
+import org.eclipse.jetty.server.AbstractHttpConnection;
 
-public class JettyServer extends org.mortbay.jetty.Server {
+public class JettyServer extends org.eclipse.jetty.server.Server {
     private Logger log = Logger.getLogger(JettyServer.class);
 
     public JettyServer() {
@@ -44,7 +45,7 @@
     }
 
     @Override
-    public void handle(final org.mortbay.jetty.HttpConnection connection) throws IOException, ServletException {
+    public void handle(final AbstractHttpConnection connection) throws IOException, ServletException {
         final Request request = connection.getRequest();
 
         if (request.getMethod().equals("CONNECT")) {
--- a/soapui/src/main/java/com/eviware/soapui/support/log/JettyLogger.java
+++ b/soapui/src/main/java/com/eviware/soapui/support/log/JettyLogger.java
@@ -17,7 +17,7 @@
 package com.eviware.soapui.support.log;
 
 import org.apache.log4j.Level;
-import org.mortbay.log.Logger;
+import org.eclipse.jetty.util.log.Logger;
 
 /**
  * Logger for Jetty Events
@@ -32,8 +32,8 @@
         log.debug(arg0, arg1);
     }
 
-    public void debug(String arg0, Object arg1, Object arg2) {
-        log.debug(format(arg0, arg1, arg2));
+    public void debug(String arg0, Object ... argv) {
+        log.debug(format(arg0, argv));
     }
 
     public Logger getLogger(String arg0) {
@@ -41,8 +41,8 @@
         return this;
     }
 
-    public void info(String arg0, Object arg1, Object arg2) {
-        log.info(format(arg0, arg1, arg2));
+    public void info(String arg0, Object ... argv) {
+        log.info(format(arg0, argv));
     }
 
     public boolean isDebugEnabled() {
@@ -58,20 +58,50 @@
 
     }
 
-    public void warn(String arg0, Object arg1, Object arg2) {
-        log.warn(format(arg0, arg1, arg2));
+    public void warn(String arg0, Object ... argv) {
+        log.warn(format(arg0, argv));
     }
 
-    private String format(String msg, Object arg0, Object arg1) {
+    private String format(String msg, Object ... argv) {
         int i0 = msg.indexOf("{}");
         int i1 = i0 < 0 ? -1 : msg.indexOf("{}", i0 + 2);
 
-        if (arg1 != null && i1 >= 0) {
-            msg = msg.substring(0, i1) + arg1 + msg.substring(i1 + 2);
+        if (argv.length >= 1 && argv[0] != null && i1 >= 0) {
+            msg = msg.substring(0, i1) + argv[0] + msg.substring(i1 + 2);
         }
-        if (arg0 != null && i0 >= 0) {
-            msg = msg.substring(0, i0) + arg0 + msg.substring(i0 + 2);
+        if (argv.length >= 2 && argv[1] != null && i0 >= 0) {
+            msg = msg.substring(0, i0) + argv[1] + msg.substring(i0 + 2);
         }
         return msg;
     }
+
+    @Override
+    public String getName() {
+        return "JettyLogger";
+    }
+
+    @Override
+    public void warn(Throwable thrwbl) {
+        log.warn(thrwbl);
+    }
+
+    @Override
+    public void info(String str, Throwable thrwbl) {
+        log.info(str, thrwbl);
+    }
+
+    @Override
+    public void info(Throwable thrwbl) {
+        log.info(thrwbl);
+    }
+
+    @Override
+    public void debug(Throwable thrwbl) {
+        log.debug(thrwbl);
+    }
+
+    @Override
+    public void ignore(Throwable thrwbl) {
+
+    }
 }
--- a/soapui/src/main/java/com/eviware/soapui/monitor/JettyMockEngine.java
+++ b/soapui/src/main/java/com/eviware/soapui/monitor/JettyMockEngine.java
@@ -31,20 +31,20 @@
 import com.eviware.soapui.support.UISupport;
 import com.eviware.soapui.support.log.JettyLogger;
 import org.apache.log4j.Logger;
-import org.mortbay.component.AbstractLifeCycle;
-import org.mortbay.io.Connection;
-import org.mortbay.io.EndPoint;
-import org.mortbay.io.nio.SelectChannelEndPoint;
-import org.mortbay.jetty.Connector;
-import org.mortbay.jetty.HttpConnection;
-import org.mortbay.jetty.Request;
-import org.mortbay.jetty.RequestLog;
-import org.mortbay.jetty.Response;
-import org.mortbay.jetty.Server;
-import org.mortbay.jetty.handler.AbstractHandler;
-import org.mortbay.jetty.handler.RequestLogHandler;
-import org.mortbay.jetty.nio.SelectChannelConnector;
-import org.mortbay.jetty.security.SslSocketConnector;
+import org.eclipse.jetty.util.component.AbstractLifeCycle;
+import org.eclipse.jetty.io.Connection;
+import org.eclipse.jetty.io.EndPoint;
+import org.eclipse.jetty.io.nio.SelectChannelEndPoint;
+import org.eclipse.jetty.server.Connector;
+import org.eclipse.jetty.server.AsyncHttpConnection;
+import org.eclipse.jetty.server.Request;
+import org.eclipse.jetty.server.RequestLog;
+import org.eclipse.jetty.server.Response;
+import org.eclipse.jetty.server.Server;
+import org.eclipse.jetty.server.handler.AbstractHandler;
+import org.eclipse.jetty.server.handler.RequestLogHandler;
+import org.eclipse.jetty.server.nio.SelectChannelConnector;
+import org.eclipse.jetty.server.ssl.SslSocketConnector;
 
 import javax.servlet.ServletException;
 import javax.servlet.ServletInputStream;
@@ -66,6 +66,8 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.CopyOnWriteArrayList;
+import org.eclipse.jetty.io.AsyncEndPoint;
+import org.eclipse.jetty.io.nio.AsyncConnection;
 
 /**
  * Core Mock-Engine hosting a Jetty web server
@@ -178,7 +180,7 @@
 
         RequestLogHandler logHandler = new RequestLogHandler();
         logHandler.setRequestLog(new MockRequestLog());
-        server.addHandler(logHandler);
+        server.addLifeCycle(logHandler);
 
         sslConnector = new SslSocketConnector();
         sslConnector.setMaxIdleTime(30000);
@@ -253,22 +255,22 @@
     }
 
     private class SoapUIConnector extends SelectChannelConnector {
-        private Set<HttpConnection> connections = new HashSet<HttpConnection>();
+        private Set<Connection> connections = new HashSet<Connection>();
 
         @Override
-        protected void connectionClosed(HttpConnection arg0) {
+        protected void connectionClosed(Connection arg0) {
             super.connectionClosed(arg0);
             connections.remove(arg0);
         }
 
         @Override
-        protected void connectionOpened(HttpConnection arg0) {
+        protected void connectionOpened(Connection arg0) {
             super.connectionOpened(arg0);
             connections.add(arg0);
         }
 
         @Override
-        protected Connection newConnection(SocketChannel socketChannel, SelectChannelEndPoint selectChannelEndPoint) {
+        public AsyncConnection newConnection(SocketChannel socketChannel, AsyncEndPoint selectChannelEndPoint) {
             return new SoapUIHttpConnection(SoapUIConnector.this, selectChannelEndPoint, getServer());
         }
 
@@ -283,7 +285,7 @@
         }
 
         private boolean hasActiveConnections() {
-            for (HttpConnection connection : connections) {
+            for (Connection connection : connections) {
                 if (!connection.isIdle()) {
                     return true;
                 }
@@ -293,7 +295,7 @@
         }
     }
 
-    private class SoapUIHttpConnection extends HttpConnection {
+    private class SoapUIHttpConnection extends AsyncHttpConnection {
         private CapturingServletInputStream capturingServletInputStream;
         private BufferedServletInputStream bufferedServletInputStream;
         private CapturingServletOutputStream capturingServletOutputStream;
@@ -303,7 +305,7 @@
         }
 
         @Override
-        public ServletInputStream getInputStream() {
+        public ServletInputStream getInputStream() throws IOException {
             if (SoapUI.getSettings().getBoolean(HttpSettings.ENABLE_MOCK_WIRE_LOG)) {
                 if (capturingServletInputStream == null) {
                     capturingServletInputStream = new CapturingServletInputStream(super.getInputStream());
@@ -562,7 +564,7 @@
     }
 
     private class ServerHandler extends AbstractHandler {
-        public void handle(String target, HttpServletRequest request, HttpServletResponse response, int dispatch)
+        public void handle(String target, Request rqst, HttpServletRequest request, HttpServletResponse response)
                 throws IOException, ServletException {
             // find mockService
             Map<String, List<MockRunner>> map = runners.get(request.getLocalPort());
--- a/soapui/src/main/java/com/eviware/soapui/impl/wsdl/monitor/jettyproxy/TunnelServlet.java
+++ b/soapui/src/main/java/com/eviware/soapui/impl/wsdl/monitor/jettyproxy/TunnelServlet.java
@@ -39,7 +39,7 @@
 import org.apache.http.entity.InputStreamEntity;
 import org.apache.http.params.CoreProtocolPNames;
 import org.apache.http.protocol.BasicHttpContext;
-import org.mortbay.util.IO;
+import org.eclipse.jetty.util.IO;
 
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletException;
--- a/soapui/src/main/java/com/eviware/soapui/monitor/SoapUIJettyThreadPool.java
+++ b/soapui/src/main/java/com/eviware/soapui/monitor/SoapUIJettyThreadPool.java
@@ -18,7 +18,7 @@
 
 import java.util.concurrent.TimeUnit;
 
-import org.mortbay.thread.ThreadPool;
+import org.eclipse.jetty.util.thread.ThreadPool;
 
 import com.eviware.soapui.SoapUI;
 
--- a/soapui/src/main/java/com/eviware/soapui/impl/wsdl/monitor/jettyproxy/ProxyServlet.java
+++ b/soapui/src/main/java/com/eviware/soapui/impl/wsdl/monitor/jettyproxy/ProxyServlet.java
@@ -38,7 +38,7 @@
 import org.apache.http.params.CoreProtocolPNames;
 import org.apache.http.protocol.BasicHttpContext;
 import org.apache.http.protocol.HttpContext;
-import org.mortbay.util.IO;
+import org.eclipse.jetty.util.IO;
 
 import javax.servlet.*;
 import javax.servlet.http.HttpServletRequest;
