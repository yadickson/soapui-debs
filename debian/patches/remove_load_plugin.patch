--- a/soapui/src/main/java/com/eviware/soapui/report/AbstractSubReportFactory.java
+++ b/soapui/src/main/java/com/eviware/soapui/report/AbstractSubReportFactory.java
@@ -5,12 +5,11 @@
 package com.eviware.soapui.report;
 
 import com.eviware.soapui.config.ReportTypeConfig;
-import com.eviware.soapui.plugins.SoapUIFactory;
 import com.eviware.soapui.report.ModelItemReport;
 import com.eviware.soapui.report.SubReport;
 import com.eviware.soapui.report.SubReportFactory;
 
-public abstract class AbstractSubReportFactory implements SubReportFactory, SoapUIFactory {
+public abstract class AbstractSubReportFactory implements SubReportFactory {
     public final ReportTypeConfig.Enum[] levels;
     private final String description;
     private final String name;
@@ -56,9 +55,4 @@
     public String getId() {
         return id;
     }
-
-    @Override
-    public Class<?> getFactoryType() {
-        return SubReportFactory.class;
-    }
 }
--- a/soapui/src/main/java/com/eviware/soapui/DefaultSoapUICore.java
+++ b/soapui/src/main/java/com/eviware/soapui/DefaultSoapUICore.java
@@ -24,7 +24,6 @@
 import com.eviware.soapui.model.settings.Settings;
 import com.eviware.soapui.monitor.JettyMockEngine;
 import com.eviware.soapui.monitor.MockEngine;
-import com.eviware.soapui.plugins.PluginManager;
 import com.eviware.soapui.security.registry.SecurityScanRegistry;
 import com.eviware.soapui.settings.*;
 import com.eviware.soapui.support.SecurityScanUtil;
@@ -75,8 +74,6 @@
     private TimerTask settingsWatcher;
     private SoapUIExtensionClassLoader extClassLoader;
 
-    private PluginManager pluginManager;
-
     public boolean isSavingSettings;
 
     protected SecurityScanRegistry securityScanRegistry;
@@ -130,33 +127,12 @@
 
         initExtensions(getExtensionClassLoader());
         initCoreComponents();
-        loadPlugins();
 
         // this is to provoke initialization
         SoapVersion.Soap11.equals(SoapVersion.Soap12);
 
     }
 
-    protected void loadPlugins() {
-        File pluginDirectory = new File(System.getProperty("soapui.home"), "plugins");
-        File[] pluginFiles = pluginDirectory.listFiles();
-        if (pluginFiles != null) {
-            for (File pluginFile : pluginFiles) {
-                log.info("Adding plugin from [" + pluginFile.getAbsolutePath() + "]");
-                try {
-                    loadOldStylePluginFrom(pluginFile);
-                } catch (Throwable e) {
-                    log.warn("Could not load plugin from file [" + pluginFile + "]");
-                }
-            }
-        }
-
-        pluginManager = new PluginManager(getFactoryRegistry(), getActionRegistry(), getListenerRegistry());
-        pluginManager.loadPlugins();
-        log.info("All plugins loaded");
-
-    }
-
     protected void initExtensions(ClassLoader extensionClassLoader) {
         /* We break the general rule that you shouldn't catch Throwable, because we don't want extensions to crash SoapUI. */
         try {
--- a/soapui/src/main/java/com/eviware/soapui/impl/wsdl/teststeps/assertions/AbstractTestAssertionFactory.java
+++ b/soapui/src/main/java/com/eviware/soapui/impl/wsdl/teststeps/assertions/AbstractTestAssertionFactory.java
@@ -22,7 +22,6 @@
 import com.eviware.soapui.model.TestPropertyHolder;
 import com.eviware.soapui.model.testsuite.Assertable;
 import com.eviware.soapui.model.testsuite.TestAssertion;
-import com.eviware.soapui.plugins.SoapUIFactory;
 import com.eviware.soapui.support.ClassUtils;
 
 import java.lang.reflect.Constructor;
@@ -31,7 +30,7 @@
 import java.util.Collections;
 import java.util.List;
 
-public abstract class AbstractTestAssertionFactory implements TestAssertionFactory, SoapUIFactory {
+public abstract class AbstractTestAssertionFactory implements TestAssertionFactory {
     private final String id;
     private final String label;
     private final Class<? extends TestAssertion> assertionClass;
@@ -109,9 +108,4 @@
             return null;
         }
     }
-
-    @Override
-    public Class<?> getFactoryType() {
-        return TestAssertionFactory.class;
-    }
 }
--- a/soapui/src/main/java/com/eviware/soapui/impl/wsdl/actions/iface/tools/wsi/WSIAnalyzeAction.java
+++ b/soapui/src/main/java/com/eviware/soapui/impl/wsdl/actions/iface/tools/wsi/WSIAnalyzeAction.java
@@ -26,7 +26,6 @@
 import com.eviware.soapui.impl.wsdl.actions.iface.tools.support.ToolHost;
 import com.eviware.soapui.model.iface.Interface;
 import com.eviware.soapui.model.settings.Settings;
-import com.eviware.soapui.plugins.ActionConfiguration;
 import com.eviware.soapui.settings.WSISettings;
 import com.eviware.soapui.support.StringUtils;
 import com.eviware.soapui.support.UISupport;
@@ -61,7 +60,6 @@
  * @author Ole.Matzura
  */
 
-@ActionConfiguration(targetType = WsdlInterface.class)
 public class WSIAnalyzeAction extends AbstractToolsAction<Interface> {
     public final static String SOAPUI_ACTION_ID = "WSIAnalyzeAction";
     public final static Logger log = Logger.getLogger(WSIAnalyzeAction.class);
--- a/soapui/src/main/java/com/eviware/soapui/model/propertyexpansion/resolvers/DynamicPropertyResolver.java
+++ b/soapui/src/main/java/com/eviware/soapui/model/propertyexpansion/resolvers/DynamicPropertyResolver.java
@@ -23,7 +23,6 @@
 import com.eviware.soapui.model.propertyexpansion.resolvers.providers.CurrentStepRunIndexProvider;
 import com.eviware.soapui.model.propertyexpansion.resolvers.providers.ProjectDirProvider;
 import com.eviware.soapui.model.propertyexpansion.resolvers.providers.WorkspaceDirProvider;
-import com.eviware.soapui.plugins.SoapUIFactory;
 import com.eviware.soapui.support.factory.SoapUIFactoryRegistryListener;
 
 import java.util.HashMap;
@@ -86,7 +85,7 @@
         String getValue(PropertyExpansionContext context);
     }
 
-    public static interface ValueProviderFactory extends SoapUIFactory {
+    public static interface ValueProviderFactory {
         public ValueProvider createValueProvider();
 
         public String getValueId();
