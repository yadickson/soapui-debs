--- a/soapui/src/main/java/com/eviware/soapui/support/log/JettyLogger.java
+++ b/soapui/src/main/java/com/eviware/soapui/support/log/JettyLogger.java
@@ -104,4 +104,9 @@
     public void ignore(Throwable thrwbl) {
 
     }
+
+    @Override
+    public void debug(String string, long l) {
+        log.debug(string);
+    }
 }
--- a/soapui/src/main/java/com/eviware/soapui/monitor/SoapUIJettyThreadPool.java
+++ b/soapui/src/main/java/com/eviware/soapui/monitor/SoapUIJettyThreadPool.java
@@ -24,9 +24,8 @@
 
 public final class SoapUIJettyThreadPool implements ThreadPool {
     @Override
-    public boolean dispatch(Runnable arg0) {
+    public void execute(Runnable arg0) {
         SoapUI.getThreadPool().execute(arg0);
-        return true;
     }
 
     @Override
--- a/soapui/src/main/java/com/eviware/soapui/impl/wsdl/monitor/jettyproxy/JettyServer.java
+++ b/soapui/src/main/java/com/eviware/soapui/impl/wsdl/monitor/jettyproxy/JettyServer.java
@@ -31,7 +31,8 @@
 import java.net.InetSocketAddress;
 import java.net.Socket;
 import java.nio.channels.SocketChannel;
-import org.eclipse.jetty.server.AbstractHttpConnection;
+import org.eclipse.jetty.server.HttpChannel;
+import org.eclipse.jetty.server.HttpConnection;
 
 public class JettyServer extends org.eclipse.jetty.server.Server {
     private Logger log = Logger.getLogger(JettyServer.class);
@@ -45,7 +46,7 @@
     }
 
     @Override
-    public void handle(final AbstractHttpConnection connection) throws IOException, ServletException {
+    public void handle(final HttpChannel<?> connection) throws IOException, ServletException {
         final Request request = connection.getRequest();
 
         if (request.getMethod().equals("CONNECT")) {
@@ -70,9 +71,9 @@
             // response.setHeader("Connection", "close");
             response.flushBuffer();
 
-            IO.copyThread(socket.getInputStream(), out);
+            IO.copy(socket.getInputStream(), out);
 
-            IO.copyThread(in, socket.getOutputStream());
+            IO.copy(in, socket.getOutputStream());
         } else {
             super.handle(connection);
         }
--- a/soapui/src/main/java/com/eviware/soapui/impl/wsdl/monitor/SoapMonitorEngineImpl.java
+++ b/soapui/src/main/java/com/eviware/soapui/impl/wsdl/monitor/SoapMonitorEngineImpl.java
@@ -25,8 +25,8 @@
 import com.eviware.soapui.monitor.SoapUIJettyThreadPool;
 import com.eviware.soapui.support.StringUtils;
 import com.eviware.soapui.support.UISupport;
-import org.eclipse.jetty.server.bio.SocketConnector;
-import org.eclipse.jetty.server.ssl.SslSocketConnector;
+import org.eclipse.jetty.server.ServerConnector;
+import org.eclipse.jetty.io.ssl.SslConnection;
 import org.eclipse.jetty.servlet.ServletContextHandler;
 import org.eclipse.jetty.servlet.ServletHolder;
 
@@ -38,14 +38,15 @@
     private static final String HTTP = "http://";
     private static final String HTTPS = "https://";
     JettyServer server = new JettyServer();
-    SocketConnector connector = new SocketConnector();
-    private SslSocketConnector sslConnector;
+    ServerConnector connector;
+    private SslConnection sslConnector;
     private final String sslEndpoint;
     private boolean proxyOrTunnel = true;
     private ContentTypes includedContentTypes = SoapMonitorAction.defaultContentTypes();
 
     public SoapMonitorEngineImpl(final String sslEndpoint) {
         this.sslEndpoint = sslEndpoint;
+        this.connector = new ServerConnector(server);
     }
 
     public boolean isRunning() {
@@ -59,7 +60,7 @@
 
         if (!StringUtils.isNullOrEmpty(sslEndpoint)) {
             if (sslEndpoint.startsWith(HTTPS)) {
-                sslConnector = new SslSocketConnector();
+                sslConnector = new SslConnection();
                 sslConnector
                         .setKeystore(settings.getString(SoapMonitorAction.SecurityTabForm.SSLTUNNEL_KEYSTORE, "JKS"));
                 sslConnector.setPassword(settings.getString(SoapMonitorAction.SecurityTabForm.SSLTUNNEL_PASSWORD, ""));
--- a/soapui/src/main/java/com/eviware/soapui/monitor/JettyMockEngine.java
+++ b/soapui/src/main/java/com/eviware/soapui/monitor/JettyMockEngine.java
@@ -34,9 +34,9 @@
 import org.eclipse.jetty.util.component.AbstractLifeCycle;
 import org.eclipse.jetty.io.Connection;
 import org.eclipse.jetty.io.EndPoint;
-import org.eclipse.jetty.io.nio.SelectChannelEndPoint;
+import org.eclipse.jetty.io.SelectChannelEndPoint;
 import org.eclipse.jetty.server.Connector;
-import org.eclipse.jetty.server.AsyncHttpConnection;
+import org.eclipse.jetty.server.HttpConnection;
 import org.eclipse.jetty.server.Request;
 import org.eclipse.jetty.server.RequestLog;
 import org.eclipse.jetty.server.Response;
@@ -44,7 +44,7 @@
 import org.eclipse.jetty.server.handler.AbstractHandler;
 import org.eclipse.jetty.server.handler.RequestLogHandler;
 import org.eclipse.jetty.server.nio.SelectChannelConnector;
-import org.eclipse.jetty.server.ssl.SslSocketConnector;
+import org.eclipse.jetty.io.ssl.SslConnection;
 
 import javax.servlet.ServletException;
 import javax.servlet.ServletInputStream;
@@ -66,8 +66,6 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.CopyOnWriteArrayList;
-import org.eclipse.jetty.io.AsyncEndPoint;
-import org.eclipse.jetty.io.nio.AsyncConnection;
 
 /**
  * Core Mock-Engine hosting a Jetty web server
@@ -83,7 +81,7 @@
     private Map<Integer, SoapUIConnector> connectors = new HashMap<Integer, SoapUIConnector>();
     private List<MockRunner> mockRunners = new CopyOnWriteArrayList<MockRunner>();
 
-    private SslSocketConnector sslConnector;
+    private SslConnection sslConnector;
 
     private boolean addedSslConnector;
 
@@ -182,7 +180,7 @@
         logHandler.setRequestLog(new MockRequestLog());
         server.addLifeCycle(logHandler);
 
-        sslConnector = new SslSocketConnector();
+        sslConnector = new SslConnection();
         sslConnector.setMaxIdleTime(30000);
     }
 
@@ -270,7 +268,7 @@
         }
 
         @Override
-        public AsyncConnection newConnection(SocketChannel socketChannel, AsyncEndPoint selectChannelEndPoint) {
+        public AsyncConnection newConnection(SocketChannel socketChannel, EndPoint selectChannelEndPoint) {
             return new SoapUIHttpConnection(SoapUIConnector.this, selectChannelEndPoint, getServer());
         }
 
@@ -295,7 +293,7 @@
         }
     }
 
-    private class SoapUIHttpConnection extends AsyncHttpConnection {
+    private class SoapUIHttpConnection extends HttpConnection {
         private CapturingServletInputStream capturingServletInputStream;
         private BufferedServletInputStream bufferedServletInputStream;
         private CapturingServletOutputStream capturingServletOutputStream;
